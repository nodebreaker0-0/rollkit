syntax = "proto3";
package rollkit;
option go_package = "github.com/rollkit/rollkit/types/pb/rollkit";
import "tendermint/abci/types.proto";
import "tendermint/types/validator.proto";

// Version captures the consensus rules for processing a block in the blockchain,
// including all blockchain data structures and the rules of the application's
// state transition machine.
// This is equivalent to the tmversion.Consensus type in Tendermint.
message Version {
	uint64 block = 1;
	uint64 app = 2;
}

message Header {
	// Block and App version
	Version version = 1;

	// Block height
	uint64 height = 2;

	// Block creation time
	uint64 time = 3;

	// Previous block info
	bytes last_header_hash = 4;

	// Commit from aggregator(s) from the last block
	bytes last_commit_hash = 5;

	// Block.Data root aka Transactions
	bytes data_hash = 6;

	// Consensus params for current block
	bytes consensus_hash = 7;

	// State after applying txs from the current block
	bytes app_hash = 8;

	// Root hash of all results from the txs from the previous block.
	// This is ABCI specific but smart-contract chains require some way of committing
	// to transaction receipts/results.
	bytes last_results_hash = 9;

	// Original proposer of the block
	// Note that the address can be derived from the pubkey which can be derived
	// from the signature when using secp256k.
	// We keep this in case users choose another signature format where the
	// pubkey can't be recovered by the signature (e.g. ed25519).
	bytes proposer_address = 10;

	// Hash of block aggregator set, at a time of block creation
	bytes aggregators_hash = 11;

	// Chain ID the block belongs to
	string chain_id = 12;
}

message Commit {
	repeated bytes signatures = 1;
}

message SignedHeader {
	Header header = 1;
	Commit commit = 2;
	tendermint.types.ValidatorSet validators = 3;
}

message Data {
	repeated bytes txs = 1;
	repeated bytes intermediate_state_roots = 2;
	repeated tendermint.abci.Evidence evidence = 3;
}

message Block {
	SignedHeader signed_header = 1;
	Data data = 2;
}

message TxWithISRs {
	bytes pre_isr = 1;
	repeated bytes tx = 2;
	bytes post_isr = 3;
}